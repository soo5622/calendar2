<?php

/*
 * Created on 2012-4-25 by lunwei
 */

class Admin extends DB_Connect {

    private $_saltLength = 7;

    public function __construct($db = NULL, $saltLength = NULL) {
        parent::__construct($db);
        if (is_int($saltLength)) {
            $this->_saltLength = $saltLength;
        }
    }

    public function displayLoginForm() {
        return <<<LOGINFORM
		<div id="login-area">
			<form action="assets/inc/process.inc.php" method="post">
				<h3>请登录</h3>			
				<table border="0" cellspacing="0" cellpadding="0">
					<tr>
						<td>账号</td>
						<td><input type="text" name="uname" id="uname" value="" /></td>
					</tr>
					<tr>
						<td>密码</td>
						<td><input type="password" name="pword" id="pword" value="" /></td>
					</tr>
					<tr>
						<td colspan="2">
							<input type="submit" name="login_submit" value=" 登 录 " class="btn btn-primary" />&nbsp;&nbsp;<a href="./" class="btn">取消</a>
						</td>
					</tr>									
				</table>
				<input type="hidden" name="token" value="$_SESSION[token]" />
				<input type="hidden" name="action" value="user_login" />
			</form>
		</div>	
LOGINFORM;
    }

    public function processLoginForm() {
        if ($_POST['action'] != 'user_login') {
            return "Invalid action supplied for processLoginForm.";
        }
        $uname = htmlentities($_POST['uname'], ENT_QUOTES, "UTF-8");
        $pword = htmlentities($_POST['pword'], ENT_QUOTES, "UTF-8");
        $sql = "SELECT `user_id`, `user_name`, `user_email`, `user_pass` FROM `users` WHERE `user_name` = :uname LIMIT 1";
        try {
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':uname', $uname, PDO::PARAM_STR);
            $stmt->execute();
            $user = array_shift($stmt->fetchAll());
            //array_shift() 函数的用法，我查了PHP手册后十分惊讶，原来array_shift() 的返回值是实参数组中的第一个元素
            $stmt->closeCursor();
        } catch (Exception $e) {
            die($e->getMessage());
        }
        if (!isset($user)) {
            return "No user found with that ID.";
        }
        /**
         * In order to validate a user's password hash stored in the database, 
         * you need a function to generate a salted hash from the user's supplied password
         * (a hash is an encrypted string generated by a security algorithm such as MD5 or SHA1).
         * */
        $hash = $this->_getSaltedHash($pword, $user['user_pass']);
        if ($user['user_pass'] == $hash) {
            $_SESSION['user'] = array(
                'id' => $user['user_id'],
                'name' => $user['user_name'],
                'email' => $user['user_email']);
            return TRUE;
        } else {
            return "Your username or password is invalid.";
        }
    }

    public function testSaltedHash($string, $salt = NULL) {
        return $this->_getSaltedHash($string, $salt);
    }

    public function processLogout() {
        if ($_POST['action'] != 'user_logout') {
            return "Invalid action supplied for processLogout.";
        }
        session_destroy();
        return TRUE;
    }

    private function _getSaltedHash($string, $salt = NULL) {
        if ($salt == NULL) {
            //若没有提供从数据库获取的加了盐的密码，则创建“盐”
            $salt = substr(md5(time()), 0, $this->_saltLength);
        } else {
            //在从数据库获取的加了盐的密码中提取“盐”
            $salt = substr($salt, 0, $this->_saltLength);
        }
        return $salt . sha1($salt . $string);
    }

}

?>